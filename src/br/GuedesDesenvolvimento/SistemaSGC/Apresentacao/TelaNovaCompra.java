/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.GuedesDesenvolvimento.SistemaSGC.Apresentacao;

import br.GuedesDesenvolvimento.SistemaSGC.Entidade.Cliente;
import br.GuedesDesenvolvimento.SistemaSGC.Entidade.Compra;
import br.GuedesDesenvolvimento.SistemaSGC.Entidade.Produto;
import br.GuedesDesenvolvimento.SistemaSGC.Negocio.ClienteBO;
import br.GuedesDesenvolvimento.SistemaSGC.Negocio.CompraBO;
import br.GuedesDesenvolvimento.SistemaSGC.Negocio.ProdutoBO;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Igor
 */
public class TelaNovaCompra extends javax.swing.JFrame {

    /**
     * Creates new form TelaNovaCompra
     */
    List<Produto> produtos;
    List<Cliente> clientes;
    int linhaSelecionada;
    List<Compra> produtosSelecionados;
    Compra compra = new Compra();
    double soma;
    
    public TelaNovaCompra() {
        initComponents();
        try {
            compra.setData();
            this.txtData.setText(compra.getDataFormatadaBanco());
            
            produtosSelecionados = new ArrayList<>();
            carregarClientes();
            carregarProdutos();
            ExibirDadosTabela();
            this.soma=0;
            txtValorTotal.setText(String.valueOf(valorTotalCompra()));
            this.cmbProdutos.setSelectedItem(null);
             this.cmbClientes.setSelectedItem(null);
        } catch (SQLException ex) {
            Logger.getLogger(TelaNovaCompra.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCarrinhodeCompras = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtData = new javax.swing.JTextField();
        lblValorTotal = new javax.swing.JLabel();
        txtValorTotal = new javax.swing.JFormattedTextField();
        cmbProdutos = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        lblClientes = new javax.swing.JLabel();
        cmbClientes = new javax.swing.JComboBox();
        pnlProdutos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProdutos = new javax.swing.JTable();
        btnVoltar = new javax.swing.JButton();
        btnSalvarCompras = new javax.swing.JButton();
        btnAddProduto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Carrinho de Compras");
        setAlwaysOnTop(true);
        setExtendedState(6);

        pnlCarrinhodeCompras.setBorder(javax.swing.BorderFactory.createTitledBorder("Carrinho de compras"));

        jLabel1.setText("Data");

        txtData.setEditable(false);
        txtData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataActionPerformed(evt);
            }
        });

        lblValorTotal.setText("Valor Total");

        txtValorTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtValorTotal.setToolTipText("");
        txtValorTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtValorTotalActionPerformed(evt);
            }
        });

        cmbProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProdutosActionPerformed(evt);
            }
        });

        jLabel2.setText("Produtos");

        lblClientes.setText("Clientes");

        cmbClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbClientesActionPerformed(evt);
            }
        });

        pnlProdutos.setBorder(javax.swing.BorderFactory.createTitledBorder("Produtos"));

        tblProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Codigo", "Nome", "Quantidade", "Valor"
            }
        ));
        jScrollPane1.setViewportView(tblProdutos);

        javax.swing.GroupLayout pnlProdutosLayout = new javax.swing.GroupLayout(pnlProdutos);
        pnlProdutos.setLayout(pnlProdutosLayout);
        pnlProdutosLayout.setHorizontalGroup(
            pnlProdutosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProdutosLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlProdutosLayout.setVerticalGroup(
            pnlProdutosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProdutosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnSalvarCompras.setText("Salvar");
        btnSalvarCompras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarComprasActionPerformed(evt);
            }
        });

        btnAddProduto.setText("Adicionar");
        btnAddProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProdutoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCarrinhodeComprasLayout = new javax.swing.GroupLayout(pnlCarrinhodeCompras);
        pnlCarrinhodeCompras.setLayout(pnlCarrinhodeComprasLayout);
        pnlCarrinhodeComprasLayout.setHorizontalGroup(
            pnlCarrinhodeComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCarrinhodeComprasLayout.createSequentialGroup()
                .addGroup(pnlCarrinhodeComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlProdutos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlCarrinhodeComprasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlCarrinhodeComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCarrinhodeComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbProdutos, 0, 101, Short.MAX_VALUE)
                            .addComponent(txtData))
                        .addGap(49, 49, 49)
                        .addGroup(pnlCarrinhodeComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlCarrinhodeComprasLayout.createSequentialGroup()
                                .addComponent(lblValorTotal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlCarrinhodeComprasLayout.createSequentialGroup()
                                .addComponent(lblClientes)
                                .addGap(18, 18, 18)
                                .addGroup(pnlCarrinhodeComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbClientes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(pnlCarrinhodeComprasLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnAddProduto)))))
                        .addGap(0, 24, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCarrinhodeComprasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSalvarCompras)
                .addGap(42, 42, 42)
                .addComponent(btnVoltar)
                .addGap(23, 23, 23))
        );
        pnlCarrinhodeComprasLayout.setVerticalGroup(
            pnlCarrinhodeComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCarrinhodeComprasLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(pnlCarrinhodeComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblValorTotal)
                    .addComponent(txtValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(pnlCarrinhodeComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(lblClientes)
                    .addComponent(cmbClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAddProduto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCarrinhodeComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSalvarCompras)
                    .addComponent(btnVoltar, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCarrinhodeCompras, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCarrinhodeCompras, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void cmbProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProdutosActionPerformed

        
    }//GEN-LAST:event_cmbProdutosActionPerformed

    private void btnAddProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProdutoActionPerformed
       
        carregarProdutosSelecionados();
        try {
            ExibirDadosTabela();
        } catch (SQLException ex) {
            Logger.getLogger(TelaNovaCompra.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddProdutoActionPerformed

    private void cmbClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbClientesActionPerformed
       
    }//GEN-LAST:event_cmbClientesActionPerformed

    private void txtDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataActionPerformed

    }//GEN-LAST:event_txtDataActionPerformed

    private void txtValorTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtValorTotalActionPerformed
        
        
    }//GEN-LAST:event_txtValorTotalActionPerformed

    private void btnSalvarComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarComprasActionPerformed
        try {
            compra.setData();
            this.txtData.setText(compra.getDataFormatadaBanco());

            carregarClienteSelecionado();
            CompraBO compraBO= new CompraBO();
            compraBO.criar(compra);
            exibirMensagemSucesso("Compra efetuada com sucesso!");
        } catch (Exception e) {
            exibirMensagemErro("Erro ao efetuar Compra!");
            e.printStackTrace();
            
        }
    }//GEN-LAST:event_btnSalvarComprasActionPerformed
    public double valorTotalCompra(){
        Compra produtoCompra= null;
        
        for(int i=0;i<produtosSelecionados.size();i++){
            produtoCompra= produtosSelecionados.get(i);
            
            soma=soma+produtoCompra.getProduto().getPreco();
            compra.setValorTotal(soma);
            
        }
        return compra.getValorTotal();
    }
    public void carregarProdutosSelecionados() {
        this.compra.setProduto((Produto) this.cmbProdutos.getSelectedItem());
        this.produtosSelecionados.add(this.compra);
        
    }

    public void carregarClienteSelecionado(){
        this.compra.setCliente((Cliente) this.cmbClientes.getSelectedItem());
    }

    public void carregarProdutos() throws SQLException {
        
        ProdutoBO produtoBO = new ProdutoBO();
        produtos = produtoBO.buscarProdutos();
        
        for (int i = 0; i < produtos.size(); i++) {
            Produto produto = null;
            produto = produtos.get(i);
            this.cmbProdutos.addItem(produto);
        }
    }

    public void carregarClientes() throws SQLException {
       
        ClienteBO clienteBO = new ClienteBO();
        clientes = clienteBO.buscarTodos();
        
        for (int i = 0; i < clientes.size(); i++) {
            Cliente cliente = null;
            cliente = clientes.get(i);
            this.cmbClientes.addItem(cliente);
        }

    }

    private void exibirMensagemErro(String mensagem) {
        String titulo = "Erro ao efetuar compra!";
        JOptionPane.showMessageDialog(this, mensagem, titulo, JOptionPane.ERROR_MESSAGE);
    }
    private void exibirMensagemSucesso(String mensagem) {
        String titulo = "Compra!";
        JOptionPane.showMessageDialog(this, mensagem, titulo, JOptionPane.INFORMATION_MESSAGE);
    }
    public void ExibirDadosTabela() throws SQLException {
        try {
            carregarProdutosSelecionados();
            ModelosTabelaProdutos modelosTabelaProdutos = new ModelosTabelaProdutos();
            tblProdutos.setModel(modelosTabelaProdutos);
        } catch (Exception e) {
            this.exibirMensagemErro("Erro ao carregar produto!");
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaNovaCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaNovaCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaNovaCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaNovaCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaNovaCompra().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProduto;
    private javax.swing.JButton btnSalvarCompras;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox cmbClientes;
    private javax.swing.JComboBox cmbProdutos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClientes;
    private javax.swing.JLabel lblValorTotal;
    private javax.swing.JPanel pnlCarrinhodeCompras;
    private javax.swing.JPanel pnlProdutos;
    private javax.swing.JTable tblProdutos;
    private javax.swing.JTextField txtData;
    private javax.swing.JFormattedTextField txtValorTotal;
    // End of variables declaration//GEN-END:variables

    class ModelosTabelaProdutos extends AbstractTableModel {

        @Override
        public String getColumnName(int Column) {
            if (Column == 0) {
                return "Codigo";
            } else if (Column == 1) {
                return "Nome";
            } else if (Column == 2) {
                return "Preco";
            } else {
                return "Quantidade";
            }

        }

        @Override
        public int getRowCount() {
            return produtosSelecionados.size();
        }

        @Override
        public int getColumnCount() {
            return 4;
        }

        @Override
        public Object getValueAt(int linha, int coluna) {

            Produto produto = produtos.get(linha);
            if (coluna == 0) {
                return produto.getCodigo();
            } else if (coluna == 1) {
                return produto.getNome();
            } else if (coluna == 2) {
                return produto.getPreco();
            } else {
                return produto.getQuantidade();
            }
        }

    }

}
